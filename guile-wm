#!/usr/bin/guile \
-e main
!#

;; This file is part of Guile-WM.

;;    Guile-WM is free software: you can redistribute it and/or modify
;;    it under the terms of the GNU General Public License as published by
;;    the Free Software Foundation, either version 3 of the License, or
;;    (at your option) any later version.

;;    Guile-WM is distributed in the hope that it will be useful,
;;    but WITHOUT ANY WARRANTY; without even the implied warranty of
;;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;    GNU General Public License for more details.

;;    You should have received a copy of the GNU General Public License
;;    along with Guile-WM.  If not, see <http://www.gnu.org/licenses/>.

(use-modules
 (guile-wm shared)
 (guile-wm user)
 (guile-wm log)
 (ice-9 format)
 (ice-9 regex)
 (ice-9 rdelim)
 (xcb event-loop)
 (xcb xml)
 (xcb xml xproto)
 (system base compile))

(define user-config-file (format #f "~a/.guile-wm" (getenv "HOME")))

(define (report-error resume data)
  (format (current-error-port) "X Error: ~a \n~{~a~}" 
          (xcb-struct-name (xcb-struct data))
          (map (lambda (f) (format #f "~a: ~a\n" f (xref (xcb-data data) f)))
               (xcb-struct-fields (xcb-struct data))))
  (resume))

(define wm-modules-spec (make-regexp "^;+\\s+wm-modules:\\s+(.+)"))

(define (get-user-modules)
  (define (read-module-names str)
    (define (read-names)
      (let read-name ((names '()) (raw-name (read)))
        (cond
         ((eof-object? raw-name) names)
         ((list? raw-name) (read-name (cons raw-name names) (read)))
         (else (read-name (cons `(guile-wm module ,raw-name) names) (read))))))
    (with-input-from-string str read-names))
  (define (read-modules)
    (let get-imports ((to-import '()) (l (read-line)))
      (define (get-imports-from-match match)
        (get-imports 
         (append (read-module-names (match:substring match 1)) to-import)
         (read-line)))
      (if (eof-object? (peek-char)) to-import
          (or (and=> (regexp-exec wm-modules-spec l) get-imports-from-match)
              (get-imports to-import (read-line))))))
  (define module-list (with-input-from-file user-config-file read-modules))
  (cons 'use-modules module-list))

(define (main . args)
  (define xcb-conn (xcb-connect!))
  (event-loop-prepare! xcb-conn report-error)
  (loop-with-connection xcb-conn
    (current-screen (xref (xcb-connection-setup xcb-conn) 'roots 0))
    (current-root (xref (current-screen) 'root))
    (let ((user-module (resolve-module '(guile-wm user))))
     (set-current-module user-module)
     (compile (get-user-modules) #:env user-module)
     (compile `(begin
                 (init-guile-wm-modules!)
                 (include ,user-config-file)) 
              #:env user-module))))
